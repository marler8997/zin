const std = @import("std");

pub fn enforce(comptime what: [:0]const u8, err: Error) void {
    if (err != 0) std.debug.panic("{s} failed, CGError={}", .{ what, err });
}

pub const Error = enum(c_int) {
    success = 0,
    failure = 1,
    illegalOperation = 1000,
    invalidContext = 1001,
    cannotCreate = 1002,
    invalidParameter = 1003,
    invalidValue = 1004,
    unsupported = 1005,
    rangeCheck = 1006,
    allocationFailure = 1007,
    typeMismatch = 1008,
    badExecutable = 1009,
    badArgument = 1010,
    cannotComplete = 1011,
    notImplemented = 1012,
    noMemory = 1013,
    invalidBitmap = 2000,
    invalidImageMask = 2001,
    invalidWindow = 3000,
    invalidFont = 4000,
    invalidColorSpace = 5000,
    invalidPattern = 6000,
    invalidShading = 7000,
    invalidGState = 8000,
    invalidPDFPage = 9000,
    invalidPDFStream = 9001,
    invalidPDFDictionary = 9002,
    invalidPDFArray = 9003,
    invalidPDFString = 9004,
    invalidPDFData = 9005,
    invalidPDFObject = 9006,
    invalidPDFTrailer = 9007,
    invalidPDFAnnotation = 9008,
    invalidPDFTemplate = 9009,
    invalidPDFIndirectObject = 9010,
    invalidCGImage = 10000,
    invalidEventTap = 11000,
    invalidEvent = 11001,
    invalidPropertyList = 12000,
    invalidData = 13000,
    invalidStream = 14000,
    unexpectedEOF = 14001,
    cannotOpenFile = 15000,
    cannotFindFont = 16000,
    cannotLoadFont = 16001,
    cannotCreatePath = 17000,
    cannotSavePath = 17001,
    invalidGraphicsState = 18000,
    invalidContextState = 19000,
    invalidBlendMode = 20000,
    invalidRegion = 21000,
    invalidTransform = 22000,
    invalidFontDescriptor = 23000,
    invalidColor = 24000,
    invalidColorComponent = 24001,
    invalidAffineTransform = 25000,
    invalidImage = 26000,
    invalidDisplay = 27000,
    invalidDirectDisplay = 27001,
    invalidVirtualDisplay = 27002,
    invalidDisplayMode = 27003,
    invalidDisplayGammaTable = 27004,
    invalidDisplayTransferFunction = 27005,
    invalidDisplayCursor = 27006,
    invalidDisplayMovedRegion = 27007,
    invalidDisplayReconfiguration = 27008,
    invalidDisplayReservation = 27009,
    invalidDisplayUUID = 27010,
    invalidDisplayConfiguration = 27011,
    invalidDisplaySwitchIterator = 27012,
    invalidDisplayAddedRemovalHandler = 27013,
    invalidDisplayUnit = 27014,
    invalidDisplayView = 27015,
    invalidDisplaySurface = 27016,
    invalidDisplayStream = 27017,
    invalidDisplayTimer = 27018,
    invalidDisplayLink = 27019,
    invalidDisplayPort = 27020,
    invalidDisplayModeProperty = 27021,
    invalidDisplayColorSpace = 27022,
    invalidDisplayModule = 27023,
    invalidDisplayVendor = 27024,
    invalidDisplayProduct = 27025,
    invalidDisplaySerialNumber = 27026,
    invalidDisplayGlobal = 27027,
    invalidDisplayOptions = 27028,
    invalidDisplaySet = 27029,
    invalidDisplayConfigRef = 27030,
    invalidDisplayConfigToken = 27031,
    invalidDisplayConfigOption = 27032,
    invalidDisplayConfigFlags = 27033,
    invalidDisplayConfigCount = 27034,
    invalidDisplayConfigIndex = 27035,
    invalidDisplayConfigMode = 27036,
    invalidDisplayConfigUUID = 27037,
    invalidDisplayConfigBounds = 27038,
    invalidDisplayConfigRefreshRate = 27039,
    invalidDisplayConfigIOFlags = 27040,
    invalidDisplayConfigDepth = 27041,
    invalidDisplayConfigPixelFormat = 27042,
    invalidDisplayConfigIOKitFlags = 27043,
    invalidDisplayConfigScaleFactor = 27044,
    invalidDisplayConfigRotation = 27045,
    invalidDisplayConfigVendor = 27046,
    invalidDisplayConfigProduct = 27047,
    invalidDisplayConfigSerialNumber = 27048,
    invalidDisplayConfigGlobal = 27049,
    invalidDisplayConfigOptions = 27050,
    invalidDisplayConfigSet = 27051,
    _,

    pub fn str(err: Error) ?[:0]const u8 {
        return switch (err) {
            .success => "success",
            .failure => "failure",
            .illegalOperation => "illegalOperation",
            .invalidContext => "invalidContext",
            .cannotCreate => "cannotCreate",
            .invalidParameter => "invalidParameter",
            .invalidValue => "invalidValue",
            .unsupported => "unsupported",
            .rangeCheck => "rangeCheck",
            .allocationFailure => "allocationFailure",
            .typeMismatch => "typeMismatch",
            .badExecutable => "badExecutable",
            .badArgument => "badArgument",
            .cannotComplete => "cannotComplete",
            .notImplemented => "notImplemented",
            .noMemory => "noMemory",
            .invalidBitmap => "invalidBitmap",
            .invalidImageMask => "invalidImageMask",
            .invalidWindow => "invalidWindow",
            .invalidFont => "invalidFont",
            .invalidColorSpace => "invalidColorSpace",
            .invalidPattern => "invalidPattern",
            .invalidShading => "invalidShading",
            .invalidGState => "invalidGState",
            .invalidPDFPage => "invalidPDFPage",
            .invalidPDFStream => "invalidPDFStream",
            .invalidPDFDictionary => "invalidPDFDictionary",
            .invalidPDFArray => "invalidPDFArray",
            .invalidPDFString => "invalidPDFString",
            .invalidPDFData => "invalidPDFData",
            .invalidPDFObject => "invalidPDFObject",
            .invalidPDFTrailer => "invalidPDFTrailer",
            .invalidPDFAnnotation => "invalidPDFAnnotation",
            .invalidPDFTemplate => "invalidPDFTemplate",
            .invalidPDFIndirectObject => "invalidPDFIndirectObject",
            .invalidCGImage => "invalidCGImage",
            .invalidEventTap => "invalidEventTap",
            .invalidEvent => "invalidEvent",
            .invalidPropertyList => "invalidPropertyList",
            .invalidData => "invalidData",
            .invalidStream => "invalidStream",
            .unexpectedEOF => "unexpectedEOF",
            .cannotOpenFile => "cannotOpenFile",
            .cannotFindFont => "cannotFindFont",
            .cannotLoadFont => "cannotLoadFont",
            .cannotCreatePath => "cannotCreatePath",
            .cannotSavePath => "cannotSavePath",
            .invalidGraphicsState => "invalidGraphicsState",
            .invalidContextState => "invalidContextState",
            .invalidBlendMode => "invalidBlendMode",
            .invalidRegion => "invalidRegion",
            .invalidTransform => "invalidTransform",
            .invalidFontDescriptor => "invalidFontDescriptor",
            .invalidColor => "invalidColor",
            .invalidColorComponent => "invalidColorComponent",
            .invalidAffineTransform => "invalidAffineTransform",
            .invalidImage => "invalidImage",
            .invalidDisplay => "invalidDisplay",
            .invalidDirectDisplay => "invalidDirectDisplay",
            .invalidVirtualDisplay => "invalidVirtualDisplay",
            .invalidDisplayMode => "invalidDisplayMode",
            .invalidDisplayGammaTable => "invalidDisplayGammaTable",
            .invalidDisplayTransferFunction => "invalidDisplayTransferFunction",
            .invalidDisplayCursor => "invalidDisplayCursor",
            .invalidDisplayMovedRegion => "invalidDisplayMovedRegion",
            .invalidDisplayReconfiguration => "invalidDisplayReconfiguration",
            .invalidDisplayReservation => "invalidDisplayReservation",
            .invalidDisplayUUID => "invalidDisplayUUID",
            .invalidDisplayConfiguration => "invalidDisplayConfiguration",
            .invalidDisplaySwitchIterator => "invalidDisplaySwitchIterator",
            .invalidDisplayAddedRemovalHandler => "invalidDisplayAddedRemovalHandler",
            .invalidDisplayUnit => "invalidDisplayUnit",
            .invalidDisplayView => "invalidDisplayView",
            .invalidDisplaySurface => "invalidDisplaySurface",
            .invalidDisplayStream => "invalidDisplayStream",
            .invalidDisplayTimer => "invalidDisplayTimer",
            .invalidDisplayLink => "invalidDisplayLink",
            .invalidDisplayPort => "invalidDisplayPort",
            .invalidDisplayModeProperty => "invalidDisplayModeProperty",
            .invalidDisplayColorSpace => "invalidDisplayColorSpace",
            .invalidDisplayModule => "invalidDisplayModule",
            .invalidDisplayVendor => "invalidDisplayVendor",
            .invalidDisplayProduct => "invalidDisplayProduct",
            .invalidDisplaySerialNumber => "invalidDisplaySerialNumber",
            .invalidDisplayGlobal => "invalidDisplayGlobal",
            .invalidDisplayOptions => "invalidDisplayOptions",
            .invalidDisplaySet => "invalidDisplaySet",
            .invalidDisplayConfigRef => "invalidDisplayConfigRef",
            .invalidDisplayConfigToken => "invalidDisplayConfigToken",
            .invalidDisplayConfigOption => "invalidDisplayConfigOption",
            .invalidDisplayConfigFlags => "invalidDisplayConfigFlags",
            .invalidDisplayConfigCount => "invalidDisplayConfigCount",
            .invalidDisplayConfigIndex => "invalidDisplayConfigIndex",
            .invalidDisplayConfigMode => "invalidDisplayConfigMode",
            .invalidDisplayConfigUUID => "invalidDisplayConfigUUID",
            .invalidDisplayConfigBounds => "invalidDisplayConfigBounds",
            .invalidDisplayConfigRefreshRate => "invalidDisplayConfigRefreshRate",
            .invalidDisplayConfigIOFlags => "invalidDisplayConfigIOFlags",
            .invalidDisplayConfigDepth => "invalidDisplayConfigDepth",
            .invalidDisplayConfigPixelFormat => "invalidDisplayConfigPixelFormat",
            .invalidDisplayConfigIOKitFlags => "invalidDisplayConfigIOKitFlags",
            .invalidDisplayConfigScaleFactor => "invalidDisplayConfigScaleFactor",
            .invalidDisplayConfigRotation => "invalidDisplayConfigRotation",
            .invalidDisplayConfigVendor => "invalidDisplayConfigVendor",
            .invalidDisplayConfigProduct => "invalidDisplayConfigProduct",
            .invalidDisplayConfigSerialNumber => "invalidDisplayConfigSerialNumber",
            .invalidDisplayConfigGlobal => "invalidDisplayConfigGlobal",
            .invalidDisplayConfigOptions => "invalidDisplayConfigOptions",
            .invalidDisplayConfigSet => "invalidDisplayConfigSet",
            else => null,
        };
    }
    pub fn format(
        self: Error,
        comptime fmt: []const u8,
        options: std.fmt.FormatOptions,
        writer: anytype,
    ) !void {
        _ = fmt;
        _ = options;
        if (self.str()) |s| {
            try writer.print("{} ({s})", .{ @intFromEnum(self), s });
        } else {
            try writer.print("{}", .{@intFromEnum(self)});
        }
    }
};
